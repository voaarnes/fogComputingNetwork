//
<<<<<<< HEAD
// Generated file, do not edit! Created by nedtool 5.7 from computerMessage.msg.
=======
// Generated file, do not edit! Created by opp_msgtool 6.0 from computerMessage.msg.
>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410
//

#ifndef __COMPUTERMESSAGE_M_H
#define __COMPUTERMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

<<<<<<< HEAD
// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>computerMessage.msg:16</tt> by nedtool.
=======
// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ComputerMessage;
/**
 * Class generated from <tt>computerMessage.msg:16</tt> by opp_msgtool.
>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message ComputerMessage
 * {
 *     int seq;
<<<<<<< HEAD
 *     // See enum MESSAGE_TYPE
 *     int type;
 *     int source;
=======
 *     int globalSeq;
 *     // See enum MESSAGE_TYPE
 *     int type;
>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410
 * 	    // Book title when requesting, or content of library
 * 	    //char content[1000];
 * }
 * </pre>
 */
class ComputerMessage : public ::omnetpp::cMessage
{
  protected:
<<<<<<< HEAD
    int seq;
    int type;
    int source;
=======
    int seq = 0;
    int globalSeq = 0;
    int type = 0;
>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410

  private:
    void copy(const ComputerMessage& other);

  protected:
<<<<<<< HEAD
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ComputerMessage&);
=======
    bool operator==(const ComputerMessage&) = delete;
>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410

  public:
    ComputerMessage(const char *name=nullptr, short kind=0);
    ComputerMessage(const ComputerMessage& other);
    virtual ~ComputerMessage();
    ComputerMessage& operator=(const ComputerMessage& other);
    virtual ComputerMessage *dup() const override {return new ComputerMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

<<<<<<< HEAD
    // field getter/setter methods
    virtual int getSeq() const;
    virtual void setSeq(int seq);
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getSource() const;
    virtual void setSource(int source);
=======
    virtual int getSeq() const;
    virtual void setSeq(int seq);

    virtual int getGlobalSeq() const;
    virtual void setGlobalSeq(int globalSeq);

    virtual int getType() const;
    virtual void setType(int type);
>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ComputerMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ComputerMessage& obj) {obj.parsimUnpack(b);}


<<<<<<< HEAD
=======
namespace omnetpp {

template<> inline ComputerMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ComputerMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

>>>>>>> 9d29ec1e972483d6574672af67a59bb7b0640410
#endif // ifndef __COMPUTERMESSAGE_M_H

